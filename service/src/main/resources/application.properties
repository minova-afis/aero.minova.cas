spring.application.name=Core Application System
spring.profiles.default=development
aero.afis.host.url.http=http://mintest.minova.com

# Hub Funktionalität
#minova.hub.host=hub.minova.com:32777
# Unter welchem Namen CAS auftauches sollte.
#minova.hub.client.name=CAS-TEST

# Plugins aus dem lib Ordner laden.
loader.path=../lib/

# Loge ausgef\uFFFDhrten SQL Code.
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.thymeleaf.check-template=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.content-type=text/html
spring.thymeleaf.enabled=true
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.mode=HTML
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

spring.http.converters.preferred-json-mapper=gson

login_dataSource=ldap

server.servlet.context-path=/cas
server.port=8084

management.server.port=8081
management.endpoints.enabled-by-default=false

spring.jpa.hibernate.ddl-auto=update
# `Update` wird hier benÃ¶tigt, da sonst nicht die Tabellen fÃ¼r das Sicherheits-System nach dem Starten zur VerfÃ¼gung stehen.
# Dadurch kÃ¶nnen somit auch Extensions keine Privilegien fÃ¼r ihre Methoden erstellen,
# was fÃ¼r Postgre-Installation notwendig ist, da hier das Setup nicht funktioniert.

# Wichtig fÃ¼r Postgres, damit keine "_" erzeugt werden
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Mit dieser Poolgröße wird verhindert, dass bei Verbindungsprobleme neue Verbindungen schneller aufgebaut werden.
# Im Gegenzug werden alle Datenbank-Verbindungen regelmäßig geschlossen.
spring.datasource.hikari.maximumPoolSize=30000
# keepaliveTime muss kleiner als maxLifetime sein, da sonst kein keep alive passiert.
spring.datasource.hikari.keepaliveTime=30000
# 300.000 ms bzw. 5 Minuten entspricht der längsten Zeit, welche für eine Procedure benötigt wird (vor allem Tagesabschluss [welchen es für das CAS noch nicht gibt]).
# Diese sollte kleiner als maxLifetime sein, da sich Leaks eher auf unerwartete Laufzeiten beziehen,
# während der maxLifetime sich auf zu lange Laufzeiten beziehen,
# welche gestoppt werden müssen.
spring.datasource.hikari.leakDetectionThreshold=300000
# 600.000 ms bzw. 10 Minuten
spring.datasource.hikari.maxLifetime=600000
